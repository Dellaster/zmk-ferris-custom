// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MAC 0
#define RIG 1
#define LEF 2
#define TRI 4
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

&mt {
    flavor = "balanced";
    quick-tap-ms = <150>;//for double tap backspace to repeat
    tapping-term-ms = <200>;
    require-prior-idle-ms = <120>;//higher value makes hold harder to trigger, cause it forces a tap instead if within this time. if correct with backspace, we may want a shift/mod so we set this to lowish
};

&lt {
    tapping-term-ms = <275>;
    quick_tap_ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <275>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ml: home-row-mods-left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
            hold-trigger-on-release;
        };

        mr: home-row-mods-right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };

        slash_star: slash_star {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_STAR";
            bindings = <&kp SLASH>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hash_amp: hash_amp {
            compatible = "zmk,behavior-mod-morph";
            label = "HASH_AMP";
            bindings = <&kp HASH>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semico: comma_semico {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICO";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_ques: apos_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_QUES";
            bindings = <&kp APOS>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quot_excl: quot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOT_EXCL";
            bindings = <&kp DOUBLE_QUOTES>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_PLUS";
            bindings = <&kp MINUS>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ques_exclam: ques_exclam {
            compatible = "zmk,behavior-mod-morph";
            label = "QUES_EXCLAM";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_star: apos_star {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_STAR";
            bindings = <&kp APOSTROPHE>, <&kp STAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quot_hash: quot_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOT_HASH";
            bindings = <&kp DOUBLE_QUOTES>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shiftdance_behavior: shiftdance_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTDANCE_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };

        comma_ques: comma_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUES";
            bindings = <&kp COMMA>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_exclam: dot_exclam {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCLAM";
            bindings = <&kp DOT>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_dance: comma_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMA_DANCE";
            #binding-cells = <0>;
            bindings = <&comma_star>, <&kp SEMICOLON>;
        };

        dot_dance: dot_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT_DANCE";
            #binding-cells = <0>;
            bindings = <&dot_hash>, <&kp COLON>;
        };

        slash_undersc: slash_undersc {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_UNDERSC";
            bindings = <&kp SLASH>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_star: comma_star {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_STAR";
            bindings = <&kp COMMA>, <&kp STAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_hash: dot_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_HASH";
            bindings = <&kp DOT>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_lpara: apos_lpara {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_LPARA";
            bindings = <&kp APOS>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ques_rpara: ques_rpara {
            compatible = "zmk,behavior-mod-morph";
            label = "QUES_RPARA";
            bindings = <&kp DOUBLE_QUOTES>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_q {
            bindings = <&kp Z>;
            key-positions = <7 8>;
            layers = <0>;
        };

        combo_z {
            bindings = <&kp Q>;
            key-positions = <9 8>;
            layers = <0>;
        };

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
        };
    };

    //    macros {
    //        qu_q: qu_q {
    //            compatible = "zmk,behavior-macro";
    //            #binding-cells = <0>;
    //            bindings = <&none &kp Q &kp U &kp>, <&macro_press>;
    //            label = "QU_Q";
    //        };
    //    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp B  &kp Y        &kp O       &kp U            &apos_lpara             &ques_rpara   &kp L        &kp D       &kp W        &kp V
&kp C  &ml LCTRL I  &ml LALT E  &ml LGUI A       &comma_dance            &dot_dance    &mr RGUI H   &mr RALT T  &mr RCTRL S  &kp N
&kp G  &kp X        &kp J       &kp K            &kp MINUS               &ques_exclam  &kp R        &kp M       &kp F        &kp P
                                &lt 1 BACKSPACE  &shiftdance_behavior    &kp ENTER     &lt 2 SPACE
            >;
        };

        right_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2            &kp NUMBER_3        &kp NUMBER_4    &kp N5     &kp NUMBER_6  &kp N7                     &kp N8                 &kp N9                   &kp N0
&kp EQUAL     &ml LCTRL LEFT_BRACKET  &ml LALT LESS_THAN  &ml LGUI SLASH  &kp DEL    &kp TAB       &mr RGUI NON_US_BACKSLASH  &mr RALT GREATER_THAN  &ht RCTRL RIGHT_BRACKET  &kp PLUS
&kp F1        &kp F2                  &kp F3              &kp F4          &kp F5     &kp F6        &kp F7                     &kp F8                 &kp F9                   &kp F10
                                                          &trans          &kp F11    &kp F12       &trans
            >;
        };

        left_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2            &kp NUMBER_3        &kp NUMBER_4    &kp N5     &kp NUMBER_6  &kp N7                     &kp N8                 &kp N9                   &kp N0
&kp EQUAL     &ml LCTRL LEFT_BRACKET  &ml LALT LESS_THAN  &ml LGUI SLASH  &kp DEL    &kp TAB       &mr RGUI NON_US_BACKSLASH  &mr RALT GREATER_THAN  &mr RCTRL RIGHT_BRACKET  &kp PLUS
&kp F1        &kp F2                  &kp F3              &kp F4          &kp F5     &kp F6        &kp F7                     &kp F8                 &kp F9                   &kp F10
                                                          &trans          &kp F11    &kp F12       &trans
            >;
        };

        tri_layer {
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4       &trans        &trans          &trans        &kp C_MUTE    &kp C_PREV
&trans          &trans        &trans        &trans          &kp LBRC           &kp RBRC      &trans          &kp C_BRI_UP  &kp C_VOL_UP  &kp C_PP
&bt BT_CLR_ALL  &trans        &trans        &kp LEFT_ARROW  &kp RIGHT_ARROW    &kp UP_ARROW  &kp DOWN_ARROW  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_NEXT
                                            &trans          &trans             &trans        &trans
            >;
        };
    };
};
